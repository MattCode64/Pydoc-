# systems/observer.py
"""
observer.py

Implémente un pattern Observer pour la gestion des événements
dans le jeu (ex: destruction d'un Mobile, etc.).
"""

from abc import ABC, abstractmethod
from typing import List, Any


class ISubject(ABC):
    """
    Interface ISubject : définit l'API pour attacher, détacher
    et notifier les observateurs.
    """

    @abstractmethod
    def attach(self, observer: "IObserver") -> None:
        pass

    @abstractmethod
    def detach(self, observer: "IObserver") -> None:
        pass

    @abstractmethod
    def notify(self, event_type: str, data: Any) -> None:
        pass


class IObserver(ABC):
    """
    Interface IObserver : tout observateur doit implémenter update().
    """

    @abstractmethod
    def update(self, event_type: str, data: Any) -> None:
        pass


class EventManager(ISubject):
    """
    EventManager centralise la distribution des événements
    à une liste d'observateurs.
    """

    def __init__(self):
        self._observers: List[IObserver] = []

    def attach(self, observer: IObserver) -> None:
        if observer not in self._observers:
            self._observers.append(observer)

    def detach(self, observer: IObserver) -> None:
        if observer in self._observers:
            self._observers.remove(observer)

    def notify(self, event_type: str, data: Any) -> None:
        """
        Parcourt la liste d'observateurs et déclenche leur méthode update().
        """
        for observer in self._observers:
            observer.update(event_type, data)
