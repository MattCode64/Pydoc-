# systems/observer.py
"""
observer.py

Implémente un pattern Observer pour la gestion des événements
dans le jeu (ex: destruction d'un Mobile, etc.).
"""

from abc import ABC, abstractmethod
from typing import List, Any


class ISubject(ABC):
    """
    Interface ISubject : définit l'API pour attacher, détacher
    et notifier les observateurs.
    """

    @abstractmethod
    def attach(self, observer: "IObserver") -> None:
        pass

    @abstractmethod
    def detach(self, observer: "IObserver") -> None:
        pass

    @abstractmethod
    def notify(self, event_type: str, data: Any) -> None:
        pass


class IObserver(ABC):
    """
    Interface IObserver : tout observateur doit implémenter update().
    """

    @abstractmethod
    def update(self, event_type: str, data: Any) -> None:
        pass


class EventManager(ISubject):
    """
    EventManager centralise la distribution des événements
    à une liste d'observateurs.
    """

    def __init__(self):
        self._observers: List[IObserver] = []

    def attach(self, observer: IObserver) -> None:
        if observer not in self._observers:
            self._observers.append(observer)

    def detach(self, observer: IObserver) -> None:
        if observer in self._observers:
            self._observers.remove(observer)

    def notify(self, event_type: str, data: Any) -> None:
        """
        Parcourt la liste d'observateurs et déclenche leur méthode update().
        """
        for observer in self._observers:
            observer.update(event_type, data)
















(------------------



# systems/collision.py
"""
Système de collision global pour Project Bubble.

Gère :
- Les impacts missiles / cibles (avec PK).
- Les collisions générales missile / mobile.
"""

from typing import List
from entities.missile import Missile
from entities.mobile import Mobile
from entities.target import Target


class CollisionSystem:
    """
    CollisionSystem détecte et gère les collisions entre entités (Mobiles).
    """

    def __init__(self, entities: List[Mobile], missile_collision: bool = True):
        """
        Initialise le système de collision.

        Parameters
        ----------
        entities : List[Mobile]
            Liste des entités vivantes (missiles, cibles, etc.).
        missile_collision : bool
            Activer ou désactiver les collisions missile/other_mobile.
        """
        self.entities = entities
        self.missile_collision = missile_collision

    def update(self):
        """
        Met à jour les collisions à chaque frame.
        """
        missiles = [e for e in self.entities if isinstance(e, Missile) and e.is_alive]
        other_mobiles = [e for e in self.entities if isinstance(e, Mobile) and e.is_alive]

        for missile in missiles:
            for other in other_mobiles:
                if other is missile:  # Ignorer soi-même
                    continue

                dist = self.distance(missile, other)
                if dist <= 2000:  # portée d'impact générique
                    self.handle_collision(missile, other, dist)

    def handle_collision(self, missile: Missile, other: Mobile, distance: float):
        """
        Gère la collision/impact entre un missile et un autre mobile.

        Parameters
        ----------
        missile : Missile
            Le missile impliqué.
        other : Mobile
            L'autre mobile impliqué.
        distance : float
            Distance entre les deux.
        """
        if isinstance(other, Target):
            # ✅ Cas cible : impact avec PK
            print(f"[CollisionSystem] Impact missile/cible : {missile} -> {other} (distance={distance:.1f})")
            from random import random
            if random() < missile.PK:
                print(f"[CollisionSystem] Cible {other} détruite (PK réussi)")
                other.die()
            else:
                print(f"[CollisionSystem] Cible {other} a survécu (PK raté)")

            missile.die()  # Le missile meurt après tentative d'impact

        elif self.missile_collision:
            # ✅ Cas collision avec autre mobile (missile_collision activé)
            print(f"[CollisionSystem] Collision missile/mobile : {missile} <-> {other} (distance={distance:.1f})")
            missile.die()
            other.die()

    @staticmethod
    def distance(entity_a: Mobile, entity_b: Mobile) -> float:
        """
        Calcule la distance euclidienne entre deux entités.

        Parameters
        ----------
        entity_a : Mobile
        entity_b : Mobile

        Returns
        -------
        float
            Distance en mètres.
        """
        return ((entity_a.x - entity_b.x) ** 2 + (entity_a.y - entity_b.y) ** 2) ** 0.5

