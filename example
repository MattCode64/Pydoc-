# core/factory/entity_factory.py

from typing import List, Dict, Union
from entities.mobile import Mobile
from entities.missile import Missile
from entities.target import Target
from systems.observer import EventManager


class EntityFactory:
    """
    Factory pour créer des entités (Mobile, Missile, Target)
    en fonction d'un plan de bataille (liste de dicts).
    """

    MACH_SPEED = 1225.0  # km/h (approx.) => Vitesse du son approx.

    @classmethod
    def create_entities(cls,
                        battle_plan: List[Dict[str, Union[str, int, float, bool]]],  # <-- bool ajouté
                        event_manager: EventManager = None
                        ) -> List[Mobile]:
        """
        Crée une liste d'entités (Missile, Target) à partir
        d'une liste de dictionnaires décrivant chaque entité.
        """
        entities = []

        for entry in battle_plan:
            entity_type = entry.get("type", "").lower()
            x = entry.get("x", 0.0)
            y = entry.get("y", 0.0)
            angle = entry.get("angle", 0.0)
            speed = entry.get("speed", None)
            alive = entry.get("alive", True)  # <-- Par défaut True

            if entity_type == "missile":
                if speed is None:
                    speed = 0.8 * cls.MACH_SPEED
                pk = entry.get("pk", 0.9)
                controller = entry.get("controller", None)
                missile = Missile(
                    x, y,
                    angle=angle,
                    speed=speed,
                    PK=pk,
                    controller=controller,
                    event_manager=event_manager,
                    alive=alive  # <-- Transmettre l'état vivant/mort
                )
                entities.append(missile)

            elif entity_type == "target":
                if speed is None:
                    speed = 0.0
                target = Target(
                    x, y,
                    angle=angle,
                    speed=speed,
                    event_manager=event_manager,
                    alive=alive  # <-- Transmettre l'état vivant/mort
                )
                entities.append(target)

            else:
                raise ValueError(f"[EntityFactory] Type d'entité inconnu : {entity_type}")

        return entities
